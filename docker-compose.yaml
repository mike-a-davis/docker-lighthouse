version: "3"

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  minio_data1: {}
  minio_data2: {}
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:


services:
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    ports:
      - 5432:5432 
    networks:
      lightning:
        ipv4_address: 172.24.1.10

  metabase:
    container_name: "metabase"
    restart: "always"
    image: metabase/metabase
    env_file:
      - metabase.env
    ports:
      - 3000:3000
    depends_on:
      - router
      - postgres
    networks:
      lightning:
        ipv4_address: 172.24.1.20

  zookeeper:
    image: 'bitnami/zookeeper:3'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      lightning:
        ipv4_address: 172.24.1.30
      
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_ADVERTISED_HOST_NAME=172.24.1.40
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.24.1.40:29092,PLAINTEXT_HOST://172.24.1.40:9092
      - KAFKA_CREATE_TOPICS="vsphere_metrics:1:1,druid_metrics:1:1,druid_alerts:1:1"
    depends_on:
      - zookeeper
    networks:
      lightning:
        ipv4_address: 172.24.1.40

  coordinator:
    image: apache/druid:0.19.0
    container_name: coordinator
    volumes:
      - ./storage:/opt/data
      - coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - kafka
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - druid.env
    networks:
      lightning:
        ipv4_address: 172.24.1.50

  broker:
    image: apache/druid:0.19.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - kafka
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - druid.env
    networks:
      lightning:
        ipv4_address: 172.24.1.60

  historical:
    image: apache/druid:0.19.0
    container_name: historical
    volumes:
      - ./storage:/opt/data
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - kafka
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - druid.env
    networks:
      lightning:
        ipv4_address: 172.24.1.70

  middlemanager:
    image: apache/druid:0.19.0
    container_name: middlemanager
    volumes:
      - ./storage:/opt/data
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - kafka
      - postgres
      - coordinator
    ports:
      - "8091:8091"
    command:
      - middleManager
    env_file:
      - druid.env
    networks:
      lightning:
        ipv4_address: 172.24.1.80

  router:
    image: apache/druid:0.19.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - kafka
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - druid.env
    networks:
      lightning:
        ipv4_address: 172.24.1.90

  minio1:
    image: minio/minio:RELEASE.2020-06-03T22-13-49Z
    container_name: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
    ports:
      - "9001:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      lightning:
        ipv4_address: 172.24.1.101

  minio2:
    image: minio/minio:RELEASE.2020-06-03T22-13-49Z
    container_name: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    ports:
      - "9002:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      lightning:
        ipv4_address: 172.24.1.102

  minio3:
    image: minio/minio:RELEASE.2020-06-03T22-13-49Z
    container_name: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2
    ports:
      - "9003:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      lightning:
        ipv4_address: 172.24.1.103

  minio4:
    image: minio/minio:RELEASE.2020-06-03T22-13-49Z
    container_name: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2
    ports:
      - "9004:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      lightning:
        ipv4_address: 172.24.1.104

networks:
  lightning:
    ipam:
      driver: default
      config:
        - subnet: 172.24.1.0/24
